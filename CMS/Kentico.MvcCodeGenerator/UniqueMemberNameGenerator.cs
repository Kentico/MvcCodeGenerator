using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using CMS.Base;

using Microsoft.CSharp;
using System.Globalization;

namespace Kentico.MvcCodeGenerator
{
    /// <summary>
    /// Provides unique member names for classes generated by content item templates.
    /// </summary>
    /// <remarks>
    /// This generator turns field names into property names that are unique and valid.
    /// It can also create better looking property names by removing the redundant data class name from content item field names.
    /// </remarks>
    internal class UniqueMemberNameGenerator
    {
        /// <summary>
        /// The collection of member names that are already declared, either by the base type, or this generator.
        /// </summary>
        private readonly HashSet<string> mExcludedMemberNames;


        /// <summary>
        /// The prefix that should be removed from field names before turning them into unique member names.
        /// </summary>
        private readonly string mFieldNamePrefix;


        /// <summary>
        /// The code provider that determines whether a member name is valid.
        /// </summary>
        private readonly CSharpCodeProvider codeProvider = new CSharpCodeProvider();


        /// <summary>
        ///Initializes a new instance of the <see cref="UniqueMemberNameGenerator"/> class.
        /// </summary>
        /// <param name="baseType">The base class of the generated class.</param>
        /// <param name="excludedMemberNames">The member names that cannot be generated.</param>
        /// <param name="fieldNamePrefix">The prefix that should be removed from field names before turning them into unique member names.</param>
        public UniqueMemberNameGenerator(Type baseType, string[] excludedMemberNames, string fieldNamePrefix)
        {
            mFieldNamePrefix = fieldNamePrefix;
            mExcludedMemberNames = GetExcludedMemberNames(baseType, excludedMemberNames);
        }


        /// <summary>
        /// Returns a unique member name for the specified field.
        /// </summary>
        /// <param name="fieldName">The name of the content item field.</param>
        /// <param name="removePrefix">If true, the prefix defined in <see cref="UniqueMemberNameGenerator" /> is removed.</param>
        /// <returns>A unique member name for the specified field.</returns>
        public string GetUniqueMemberName(string fieldName, bool removePrefix)
        {
            if (FieldNameStartsWithPrefix(fieldName) && removePrefix)
            {
                fieldName = fieldName.Substring(mFieldNamePrefix.Length);
            }

            var index = 1;
            var memberName = fieldName;
            while (!IsUniqueMemberName(memberName))
            {
                memberName = fieldName + index.ToString("D", CultureInfo.InvariantCulture);
                index++;
            }

            mExcludedMemberNames.Add(memberName);

            return memberName;
        }


        private bool FieldNameStartsWithPrefix(string fieldName)
        {
            if (String.IsNullOrEmpty(mFieldNamePrefix) || mFieldNamePrefix.Length >= fieldName.Length)
            {
                return false;
            }

            return fieldName.StartsWithCSafe(mFieldNamePrefix, StringComparison.InvariantCultureIgnoreCase);
        }


        private bool IsUniqueMemberName(string memberName)
        {
            return !mExcludedMemberNames.Contains(memberName) && codeProvider.IsValidIdentifier(memberName);
        }


        private HashSet<string> GetExcludedMemberNames(Type baseType, string[] excludedMemberNames)
        {
            var names = new HashSet<string>(excludedMemberNames, StringComparer.InvariantCulture);

            names.UnionWith(baseType.GetMembers().Select(x => x.Name));
            names.Add("Finalize");

            return names;
        }
    }
}